#!/bin/bash
#
# git-bzr


function gitbzr_help_all() {
  echo >&2 "git-bzr, Bidirectional operation between a Bzr repository and git"
  echo >&2
  echo >&2 "Usage: git-bzr <command> ..."
  echo >&2
  echo >&2 "Commands:"
  echo >&2
  echo >&2 "  add                         Add a bzr branch as a remote"
  echo >&2 "  fetch                       Fetch from bzr into a named branch"
  echo >&2 "  push                        Push to the tracked bzr branch"
  echo >&2 "  show                        Print location of a tracked bzr branch"
  echo >&2
  echo >&2 "  help                        Display help for a specific command"
  echo >&2
  exit 1
}

function perror() {
    echo "git-bzr: $@" >&2
}

if [ $# -lt 1 ] ; then
    gitbzr_help_all
fi

command=$1

return=""

function gitbzr_add_help() {
  echo >&2 "git-bzr, Bidirectional operation between a Bzr repository and git"
  echo >&2
  echo >&2 "Usage: git-bzr add <remote> /path/to/bzr/branch"
  echo >&2
  exit 1
}

function gitbzr_add() {
    if [ $# -lt 2 ] ; then
        gitbzr_add_help
    fi
    name="$1"
    location="$2"
    if [[ -z "$@" ]] ; then
        gitbzr_add_help
    fi
    if [ -n "$(git remote show | grep -q \"$name\")" ] ; then
        perror "There is already a remote with that name"
        exit 1
    fi
    if [ -n "$(git config git-bzr.${name}.url)" ] ; then
        perror "There is already a bazaar branch with that name"
        exit 1
    fi
    if ! bzr info -q ${location} > /dev/null 2>&1 ; then
        perror "Remote is not a bazaar repository"
        exit 1
    fi

    git config "git-bzr.${name}.location" "$location"
    echo -e "Bazaar branch $name added.\nYou can fetch it with 'git bzr fetch $name'."
}

function get_location() {
    if [ $# -lt 1 ] ; then
        echo "At least the name of the remote is needed for get_location"
        exit 1
    fi
    remote=$1
    shift
    args=$@
    l="$(git config git-bzr.${remote}.location)"
    if [ -z "$l" ] ; then
        perror "Cannot find bazaar remote with name '${remote}'."
        exit 1
    fi
    return="$l"
}

function gitbzr_show_help() {
  echo >&2 "git-bzr show, Print location of a tracked bzr branch"
  echo >&2
  echo >&2 "Usage: git-bzr show <remote>"
  echo >&2
  exit 1
}

function gitbzr_show() {
    if [ $# -lt 1 ] ; then
        gitbzr_show_help
    fi
    remote=$1
    get_location "$remote"
    echo $return
}

function gitbzr_fetch_help() {
  echo >&2 "git-bzr fetch, Fetch from bzr into a named branch"
  echo >&2
  echo >&2 "Usage: git-bzr fetch <remote>"
  echo >&2
  exit 1
}

function gitbzr_fetch() {
    if [ $# -lt 1 ] ; then
        gitbzr_fetch_help
    fi
    remote=$1
    shift
    args=$@
    if [ -z "${remote}${args}" ] ; then
        gitbzr_fetch_help
    fi
    get_location "$remote"
    location=$return

    git_map=$(readlink -f $(git rev-parse --git-dir))"/bzr-git/${remote}-git-map"
    bzr_map=$(readlink -f $(git rev-parse --git-dir))"/bzr-git/${remote}-bzr-map"

    if [ ! -f "$git_map" -a ! -f "$bzr_map" ] ; then
        echo "There doesn't seem to be an existing refmap. "
        echo "Doing an initial import"
        mkdir -p "$(dirname $git_map)"
        bzr fast-export --export-marks=${bzr_map} \
            --git-branch=bzr/${remote} ${location} \
            | git fast-import --export-marks=${git_map}
    elif [ -f "$git_map" -a -f "$bzr_map" ] ; then
        echo "Updating remote ${remote}"
        old_rev="$(git rev-parse bzr/${remote})"
        bzr fast-export --import-marks=${bzr_map} \
            --export-marks=${bzr_map} --git-branch=bzr/${remote} ${location} \
            | git fast-import --quiet --export-marks=${git_map} \
            --import-marks=${git_map}
        new_rev="$(git rev-parse bzr/${remote})"
        echo "Changes since last update:"
        git shortlog ${old_rev}..${new_rev}
    else
        perror "One of the mapfiles is missing! Something went wrong!"
        exit 1
    fi
}

function gitbzr_push_help() {
  echo >&2 "git-bzr push, Push to the tracked bzr branch"
  echo >&2
  echo >&2 "Usage: git-bzr push <remote>"
  echo >&2
  exit 1
}

function gitbzr_push() {
    if [ $# -lt 1 ] ; then
        gitbzr_push_help
    fi
    remote=$1
    shift
    args=$@

    if [ -z "${remote}${args}" ] ; then
        gitbzr_push_help
    fi
    get_location "$remote"
    location=$return

    if [ -n "$(git rev-list --left-right HEAD...bzr/$remote | sed -n '/^>/ p')" ] ; then
        perror "HEAD is not a strict child of {remote}, cannot push. Merge first"
        exit
    fi

    if [ -z "$(git rev-list --left-right HEAD...bzr/$remote | sed -n '/^</ p')" ] ; then
        perror "Nothing to push. Commit something first"
        exit
    fi

    git_map=$(readlink -f $(git rev-parse --git-dir))"/bzr-git/${remote}-git-map"
    bzr_map=$(readlink -f $(git rev-parse --git-dir))"/bzr-git/${remote}-bzr-map"

    if [ ! -f "$git_map" -o ! -f  "$bzr_map" ] ; then
        perror "We do not have refmapping yet. Then how can I push?"
        exit
    fi

    git fast-export --import-marks=$git_map --export-marks=$git_map HEAD \
        | (cd $location \
        && bzr fast-import --import-marks=$bzr_map --export-marks=$bzr_map -)
}

function gitbzr_help() {
    cmd=$1

    case $cmd in
      add )
        gitbzr_add_help
        ;;
      fetch )
        gitbzr_fetch_help
        ;;
      push )
        gitbzr_push_help
        ;;
      show )
        gitbzr_show_help
        ;;
      * )
        gitbzr_help_all
        ;;
    esac
}

function gitbzr_run() {
    cmd=$1
    shift
    args="$@"

    if [ -n "$(git rev-parse)" ] ; then
        perror "Must be inside a git repository to work"
        exit 1
    fi
    up=$(git rev-parse --show-cdup)
    if [ "x$up" == "x" ] ; then
        up="."
    fi
    cd $up
    case $cmd in
      help )
        gitbzr_help $args
        ;;
      add )
        gitbzr_add $args
        ;;
      fetch )
        gitbzr_fetch $args
        ;;
      push )
        gitbzr_push $args
        ;;
      show )
        gitbzr_show $args
        ;;
      * )
        gitbzr_help
        ;;
    esac
}

gitbzr_run $@
